// Copyright © 2023 aggronmagi <czy463@163.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// parser
////////////////////////////////////////////////////////////////////////////////
_integer : '0' - '9';
_letter : 'a' - 'z' | 'A' - 'Z' | '_' ;
_identifier : _letter|_integer|'.'|'['|']'|'<'|'>';
tok_identifier:  _letter{_identifier};

_leteral1:'`'{.}'`';
_leteral12:'"'{.}'"';
tok_literal:_leteral1|_leteral12;

_sign : ['+'|'-'];
_hex : '0' 'x' { _integer | 'a'-'f' | 'A'-'F'};
tok_num: _sign _integer {_integer} | _integer {_integer} | _hex;

_multidoc : '/' '*' {.} '*' '/';
_comment : '/' '/' {.} '\n';
tok_doc: _multidoc | _comment ;

!whitespace : ' ' | '\t' | '\n' | '\r' ;
!unixcomment: '#' {.} '\n';
////////////////////////////////////////////////////////////////////////////////
<<
import (
	"github.com/walleframe/wctl/protocol/protobuf/bridge"
	"github.com/walleframe/wctl/protocol/ast"
)
>>
////////////////////////////////////////////////////////////////////////////////

ProtocolDefine:
    Syntax Package Imports Defines					<< bridge.NewProtocol($Context, $0, $1, $2) >>
;

OptEnd:
    empty
|   ";"
;


// Syntax 定义
Syntax:
	"syntax" "=" tok_literal ";"			<< bridge.ProtoSyntax($Context, $2) >>
;

Package:
    "package" tok_identifier OptEnd			<< bridge.NewPackage($Context, $1) >>
;


Imports:
    empty
|   Imports Import
;

Import:
    "import" tok_literal OptEnd					<< bridge.NewImport($Context, $1, "") >>
|   "import" tok_identifier tok_literal OptEnd	<< bridge.NewImport($Context, $2, $1) >>
;

Defines:
    empty
|   Defines Define
;

Define:
    Enum
|   Message
|   Option
|   Service
;
////////////////////////////////////////////////////////////////////////////////
Enum:
    "enum" tok_identifier "{" EnumValues "}" OptEnd	<< bridge.NewEnum($Context, $1, $3) >>
;

EnumValues:
	empty
|	EnumValues EnumValue					<< bridge.AppendOption($Context, $0, $1) >>	
;

EnumValue:
	tok_identifier OptionValue OptEnd		<< bridge.OptionExpr($Context, $0, $1) >>
;

OptionValue:
	empty
|	"=" tok_num								<< $1, nil >>
;

////////////////////////////////////////////////////////////////////////////////
// 选项配置定义
Option:
	"option" tok_identifier "=" tok_literal ";"	<< bridge.ProtoNewOption($Context, $1, $3) >>
;

////////////////////////////////////////////////////////////////////////////////
// 消息定义
Message:
    "message" tok_identifier "{" Fields "}" OptEnd  << bridge.NewMessage($Context, $1, $3) >>
;


// 字段定义
Fields:
	empty									<< &ast.YTMessage{},nil >>
|	Fields FieldExpr						<< bridge.FieldField($Context, $0, $1) >>
|	Fields Message							<< bridge.FieldMessage($Context, $0, $1) >>
;

FieldExpr: 
    FieldType tok_identifier "=" tok_num  OptEnd << bridge.NewField($Context,$0, $1, $3, nil) >>
;

FieldType:
	"map" "<" tok_identifier "," tok_identifier ">"		<< bridge.MapType($Context, $2, $4) >>
|	"repeated" tok_identifier							<< bridge.ArrayType($Context, $1) >>
|	tok_identifier										<< bridge.BasicOrCustomType($Context, $0) >>
;

////////////////////////////////////////////////////////////////////////////////
// 服务定义
Service:
	"service" tok_identifier "{" ServiceElements "}"		<< bridge.NewService($Context, $1, $3) >> 
;


ServiceElements:
	empty
|	ServiceElements Method					<<bridge.ServiceMethod($Context, $0, $1) >>
;


////////////////////////////////////////////////////////////////////////////////
// 方法定义
Method:
	"rpc" tok_identifier "(" tok_identifier ")" "returns" "(" tok_identifier ")" "{" "}"	<< bridge.NewMethod($Context, $1, $3, $7, nil, nil)  >> 
;
