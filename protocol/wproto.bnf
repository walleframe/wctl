// Copyright © 2023 aggronmagi <czy463@163.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// parser
////////////////////////////////////////////////////////////////////////////////
_integer : '0' - '9';
_letter : 'a' - 'z' | 'A' - 'Z' | '_' ;
_identifier : _letter|_integer|'.';
tok_identifier:  _letter{_identifier};

_leteral1:'`'{.}'`';
_leteral12:'"'{.}'"';
tok_literal:_leteral1|_leteral12;

_sign : ['+'|'-'];
_hex : '0' 'x' { _integer | 'a'-'f' | 'A'-'F'};
tok_num: _sign _integer {_integer} | _integer {_integer} | _hex;

_multidoc : '/' '*' {.} '*' '/';
_comment : '/' '/' {.} '\n';
tok_doc: _multidoc | _comment ;

!whitespace : ' ' | '\t' | '\n' | '\r' ;
!unixcomment: '#' {.} '\n';
////////////////////////////////////////////////////////////////////////////////
<<
import (
	"github.com/walleframe/wctl/protocol/wproto/bridge"
	"github.com/walleframe/wctl/protocol/ast"
)
>>
////////////////////////////////////////////////////////////////////////////////

ProtocolDefine:
    Package Imports Defines					<< bridge.NewProtocol($Context, $0, $1, $2) >>
;

OptEnd:
    empty
|   ";"
;

Package:
    "package" tok_identifier OptEnd			<< bridge.NewPackage($Context, $1) >>
;

Imports:
    empty
|   Imports Import
;

Import:
    "import" tok_literal OptEnd					<< bridge.NewImport($Context, $1, "") >>
|   "import" tok_identifier tok_literal OptEnd	<< bridge.NewImport($Context, $2, $1) >>
;

Defines:
    empty
|   Defines Define
;

Define:
    Enum
|   Message
|   OptionExpr                                  << bridge.FileOption($Context, $0) >>
|   Service
|   Project
;

Enum:
    "enum" tok_identifier "{" Options "}" OptEnd	<< bridge.NewEnum($Context, $1, $3) >>
;

Message:
    "message" tok_identifier "{" Fields "}" OptEnd  << bridge.NewMessage($Context, $1, $3) >>
;

////////////////////////////////////////////////////////////////////////////////
// Option定义
Options:
	empty
|	Options OptionExpr						<< bridge.AppendOption($Context, $0, $1) >>	
;


OptionExpr:
	tok_identifier OptionValue OptEnd		<< bridge.OptionExpr($Context, $0, $1) >>
;

OptionValue:
	"=" "true"								<< true, nil >>
|	"=" "false"								<< false, nil >>
|	"=" tok_num								<< $1, nil >>
|	"=" tok_literal							<< $1, nil >>
;

////////////////////////////////////////////////////////////////////////////////
// 字段定义
Fields:
	empty									<< &ast.YTMessage{},nil >>
|	Fields FieldExpr						<< bridge.FieldField($Context, $0, $1) >>
|   Fields OptionExpr						<< bridge.FieldOption($Context, $0, $1) >>
|	Fields Message							<< bridge.FieldMessage($Context, $0, $1) >>
;

FieldExpr: 
    FieldType tok_identifier "=" tok_num FieldOption OptEnd << bridge.NewField($Context,$0, $1, $3, $4) >>
;

FieldOption:
	empty
|	"{" Options "}"							<< $1, nil >>
;

FieldType:
	"map" "<" tok_identifier "," tok_identifier ">"		<< bridge.MapType($Context, $2, $4) >>
|	"map" "[" tok_identifier "]" tok_identifier 		<< bridge.MapType($Context, $2, $4) >>	
|	"repeated" tok_identifier							<< bridge.ArrayType($Context, $1) >>
|	"[" "]" tok_identifier								<< bridge.ArrayType($Context, $2) >>
|	tok_identifier										<< bridge.BasicOrCustomType($Context, $0) >>
;

////////////////////////////////////////////////////////////////////////////////
// 服务定义

Service:
    "service" tok_identifier  "{" ServiceElements "}" OptEnd << bridge.NewService($Context, $1, $3) >>
;

ServiceElements:
    empty										<< &ast.YTService{}, nil >>
|   ServiceElements ServiceMethod				<< bridge.ServiceMethod($Context, $0, $1) >>
|   ServiceElements OptionExpr   				<< bridge.ServiceOption($Context, $0, $1) >>
|   ServiceElements MethodFlag					<< bridge.ServiceFlag($Context, $0, $1) >>
;


MethodFlag:
	"call" ":"								<< $0, nil >>
|	"notify" ":"							<< $0, nil >>
;

ServiceMethod:
	tok_identifier "(" tok_identifier ")" tok_identifier MethodNo FieldOption OptEnd << bridge.NewMethod($Context, $0, $2, $4, $5, $6) >>
;

MethodNo:
    empty
|   "=" tok_num								<< $1, nil >>
;


////////////////////////////////////////////////////////////////////////////////
// 项目定义
Project:
	"project" tok_identifier "{" ProjElements "}" OptEnd	<< bridge.NewProject($Context, $1, $3) >>
;

ProjElements:
	empty									<< &ast.YTProject{}, nil >>				
|	ProjElements ProjArea					<< bridge.ProjectArea($Context, $0, $1) >>
|	ProjElements OptionExpr				  	<< bridge.ProjectOption($Context, $0, $1) >>
;

ProjArea:
	tok_identifier ":"						<< $0, nil >>
;
