// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/aggronmagi/wctl/protocol/token"
)

const (
	NoState    = -1
	NumStates  = 145
	NumSymbols = 172
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '.'
1: 'p'
2: 'a'
3: 'c'
4: 'k'
5: 'a'
6: 'g'
7: 'e'
8: ';'
9: ','
10: 'i'
11: 'm'
12: 'p'
13: 'o'
14: 'r'
15: 't'
16: '='
17: 't'
18: 'r'
19: 'u'
20: 'e'
21: 'f'
22: 'a'
23: 'l'
24: 's'
25: 'e'
26: 'e'
27: 'n'
28: 'u'
29: 'm'
30: '{'
31: '}'
32: 'm'
33: 'e'
34: 's'
35: 's'
36: 'a'
37: 'g'
38: 'e'
39: '['
40: ']'
41: 'r'
42: 'e'
43: 'p'
44: 'e'
45: 'a'
46: 't'
47: 'e'
48: 'd'
49: 'm'
50: 'a'
51: 'p'
52: '<'
53: '>'
54: 'i'
55: 'n'
56: 't'
57: '8'
58: 'u'
59: 'i'
60: 'n'
61: 't'
62: '8'
63: 'i'
64: 'n'
65: 't'
66: '1'
67: '6'
68: 'u'
69: 'i'
70: 'n'
71: 't'
72: '1'
73: '6'
74: 'i'
75: 'n'
76: 't'
77: '3'
78: '2'
79: 'u'
80: 'i'
81: 'n'
82: 't'
83: '3'
84: '2'
85: 'i'
86: 'n'
87: 't'
88: '6'
89: '4'
90: 'u'
91: 'i'
92: 'n'
93: 't'
94: '6'
95: '4'
96: 's'
97: 't'
98: 'r'
99: 'i'
100: 'n'
101: 'g'
102: 'b'
103: 'y'
104: 't'
105: 'e'
106: 's'
107: 'b'
108: 'o'
109: 'o'
110: 'l'
111: 'f'
112: 'l'
113: 'o'
114: 'a'
115: 't'
116: 'd'
117: 'o'
118: 'u'
119: 'b'
120: 'l'
121: 'e'
122: 's'
123: 'e'
124: 'r'
125: 'v'
126: 'i'
127: 'c'
128: 'e'
129: 'c'
130: 'a'
131: 'l'
132: 'l'
133: ':'
134: 'n'
135: 'o'
136: 't'
137: 'i'
138: 'f'
139: 'y'
140: '('
141: ')'
142: 'p'
143: 'r'
144: 'o'
145: 'j'
146: 'e'
147: 'c'
148: 't'
149: '+'
150: '-'
151: '_'
152: '/'
153: '*'
154: '*'
155: '/'
156: '/'
157: '/'
158: '\n'
159: '`'
160: '`'
161: '"'
162: '"'
163: ' '
164: '\t'
165: '\n'
166: '\r'
167: '#'
168: '\n'
169: '0'-'9'
170: 'a'-'z'
171: .
*/
