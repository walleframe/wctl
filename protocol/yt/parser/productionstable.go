// Code generated by gocc; DO NOT EDIT.

package parser

import "github.com/aggronmagi/wctl/protocol/ast"

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Start	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Start : FileElements	<< ast.CheckProgram(X[0]) >>`,
		Id:         "Start",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.CheckProgram(X[0])
		},
	},
	ProdTabEntry{
		String: `FileElements : empty	<< ast.NewFileElements1() >>`,
		Id:         "FileElements",
		NTType:     2,
		Index:      2,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFileElements1()
		},
	},
	ProdTabEntry{
		String: `FileElements : FileElements Doc Element	<< ast.AppendFileElements(X[0], X[1], X[2]) >>`,
		Id:         "FileElements",
		NTType:     2,
		Index:      3,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendFileElements(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Element : Package	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      4,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Element : Import	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      5,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Element : Option	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Element : Enum	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      7,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Element : Message	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Element : Service	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Element : Project	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Package : "package" tok_identifier OptEnd	<< ast.NewPackage(X[1]) >>`,
		Id:         "Package",
		NTType:     4,
		Index:      11,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewPackage(X[1])
		},
	},
	ProdTabEntry{
		String: `OptEnd : empty	<<  >>`,
		Id:         "OptEnd",
		NTType:     5,
		Index:      12,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `OptEnd : ";"	<<  >>`,
		Id:         "OptEnd",
		NTType:     5,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `OptEnd : ","	<<  >>`,
		Id:         "OptEnd",
		NTType:     5,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Import : "import" AliasName tok_literal OptEnd	<< ast.NewImport(X[1],X[2]) >>`,
		Id:         "Import",
		NTType:     6,
		Index:      15,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewImport(X[1],X[2])
		},
	},
	ProdTabEntry{
		String: `AliasName : empty	<<  >>`,
		Id:         "AliasName",
		NTType:     7,
		Index:      16,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `AliasName : tok_identifier	<<  >>`,
		Id:         "AliasName",
		NTType:     7,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Option : tok_option OptionValue	<< ast.NewOption(X[0], X[1]) >>`,
		Id:         "Option",
		NTType:     8,
		Index:      18,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewOption(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `OptionValue : empty	<<  >>`,
		Id:         "OptionValue",
		NTType:     9,
		Index:      19,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `OptionValue : "=" tok_literal	<< ast.NewOptionVal(X[1],nil) >>`,
		Id:         "OptionValue",
		NTType:     9,
		Index:      20,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewOptionVal(X[1],nil)
		},
	},
	ProdTabEntry{
		String: `OptionValue : "=" tok_const_int	<< ast.NewOptionVal(nil,X[1]) >>`,
		Id:         "OptionValue",
		NTType:     9,
		Index:      21,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewOptionVal(nil,X[1])
		},
	},
	ProdTabEntry{
		String: `Doc : empty	<<  >>`,
		Id:         "Doc",
		NTType:     10,
		Index:      22,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Doc : Doc tok_doc	<< ast.AppendDoc(X[0], X[1]) >>`,
		Id:         "Doc",
		NTType:     10,
		Index:      23,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendDoc(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Enum : "enum" tok_identifier "{" EnumItems "}" OptEnd	<< ast.NewEnum(X[1], X[3]) >>`,
		Id:         "Enum",
		NTType:     11,
		Index:      24,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewEnum(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `EnumItems : empty	<<  >>`,
		Id:         "EnumItems",
		NTType:     12,
		Index:      25,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `EnumItems : EnumItems Doc EnumItem	<< ast.AppendEnumItem(X[0], X[2], X[1]) >>`,
		Id:         "EnumItems",
		NTType:     12,
		Index:      26,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendEnumItem(X[0], X[2], X[1])
		},
	},
	ProdTabEntry{
		String: `EnumItems : EnumItems Doc Option	<< ast.AppendEnumOption(X[0], X[2], X[1]) >>`,
		Id:         "EnumItems",
		NTType:     12,
		Index:      27,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendEnumOption(X[0], X[2], X[1])
		},
	},
	ProdTabEntry{
		String: `EnumItem : tok_identifier EnumItemValue OptEnd	<< ast.NewEnumValue(X[0], X[1]) >>`,
		Id:         "EnumItem",
		NTType:     13,
		Index:      28,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewEnumValue(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `EnumItemValue : empty	<<  >>`,
		Id:         "EnumItemValue",
		NTType:     14,
		Index:      29,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `EnumItemValue : "=" tok_const_int	<< X[1],nil >>`,
		Id:         "EnumItemValue",
		NTType:     14,
		Index:      30,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1],nil
		},
	},
	ProdTabEntry{
		String: `Message : "message" tok_identifier "{" MessageElements "}" OptEnd	<< ast.NewMessage(X[1], X[3]) >>`,
		Id:         "Message",
		NTType:     15,
		Index:      31,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewMessage(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `MessageElements : empty	<<  >>`,
		Id:         "MessageElements",
		NTType:     16,
		Index:      32,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `MessageElements : MessageElements Doc Field	<< ast.AppendMessageField(X[0], X[1], X[2]) >>`,
		Id:         "MessageElements",
		NTType:     16,
		Index:      33,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendMessageField(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `MessageElements : MessageElements Doc Option	<< ast.AppendMessageOption(X[0], X[1], X[2]) >>`,
		Id:         "MessageElements",
		NTType:     16,
		Index:      34,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendMessageOption(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Field : tok_const_int ":" FiledType tok_identifier AddtionOption OptEnd	<< ast.NewField(X[0], X[2], X[3], X[4]) >>`,
		Id:         "Field",
		NTType:     17,
		Index:      35,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewField(X[0], X[2], X[3], X[4])
		},
	},
	ProdTabEntry{
		String: `AddtionOption : empty	<<  >>`,
		Id:         "AddtionOption",
		NTType:     18,
		Index:      36,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `AddtionOption : "{" FieldOption "}"	<< X[1],nil >>`,
		Id:         "AddtionOption",
		NTType:     18,
		Index:      37,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1],nil
		},
	},
	ProdTabEntry{
		String: `FieldOption : empty	<<  >>`,
		Id:         "FieldOption",
		NTType:     19,
		Index:      38,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `FieldOption : FieldOption Doc Option	<< ast.AppendFiledOptions(X[0], X[1], X[2]) >>`,
		Id:         "FieldOption",
		NTType:     19,
		Index:      39,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendFiledOptions(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `FiledType : ContainerElemType	<<  >>`,
		Id:         "FiledType",
		NTType:     20,
		Index:      40,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FiledType : ContainerType	<<  >>`,
		Id:         "FiledType",
		NTType:     20,
		Index:      41,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ContainerType : ListType	<<  >>`,
		Id:         "ContainerType",
		NTType:     21,
		Index:      42,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ContainerType : MapType	<<  >>`,
		Id:         "ContainerType",
		NTType:     21,
		Index:      43,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ContainerElemType : BaseType	<< ast.NewFieldTypeBase(X[0]) >>`,
		Id:         "ContainerElemType",
		NTType:     22,
		Index:      44,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFieldTypeBase(X[0])
		},
	},
	ProdTabEntry{
		String: `ContainerElemType : CustomType	<<  >>`,
		Id:         "ContainerElemType",
		NTType:     22,
		Index:      45,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CustomType : tok_identifier	<< ast.NewFieldTypeCustom(X[0]) >>`,
		Id:         "CustomType",
		NTType:     23,
		Index:      46,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFieldTypeCustom(X[0])
		},
	},
	ProdTabEntry{
		String: `CustomType : tok_option	<< ast.NewFieldTypeCustom(X[0]) >>`,
		Id:         "CustomType",
		NTType:     23,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFieldTypeCustom(X[0])
		},
	},
	ProdTabEntry{
		String: `ListType : "[" "]" ContainerElemType	<< ast.NewFieldTypeList(X[2]) >>`,
		Id:         "ListType",
		NTType:     24,
		Index:      48,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFieldTypeList(X[2])
		},
	},
	ProdTabEntry{
		String: `MapType : "map" "[" BaseType "]" ContainerElemType	<< ast.NewFieldTypeMap(X[2],X[4]) >>`,
		Id:         "MapType",
		NTType:     25,
		Index:      49,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFieldTypeMap(X[2],X[4])
		},
	},
	ProdTabEntry{
		String: `BaseType : "int8"	<< ast.BaseTypeInt8, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      50,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt8, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "uint8"	<< ast.BaseTypeUint8, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint8, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "int16"	<< ast.BaseTypeInt16, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      52,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt16, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "uint16"	<< ast.BaseTypeUint16, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      53,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint16, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "int32"	<< ast.BaseTypeInt32, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      54,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt32, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "uint32"	<< ast.BaseTypeUint32, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      55,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint32, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "int64"	<< ast.BaseTypeInt64, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      56,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt64, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "uint64"	<< ast.BaseTypeUint64, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      57,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint64, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "string"	<< ast.BaseTypeString, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      58,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeString, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "bytes"	<< ast.BaseTypeBinary, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      59,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeBinary, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "bool"	<< ast.BaseTypeBool, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      60,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeBool, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "i8"	<< ast.BaseTypeInt8, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      61,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt8, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "u8"	<< ast.BaseTypeUint8, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      62,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint8, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "i16"	<< ast.BaseTypeInt16, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      63,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt16, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "u16"	<< ast.BaseTypeUint16, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      64,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint16, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "i32"	<< ast.BaseTypeInt32, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      65,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt32, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "u32"	<< ast.BaseTypeUint32, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      66,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint32, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "i64"	<< ast.BaseTypeInt64, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      67,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt64, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "u64"	<< ast.BaseTypeUint64, nil >>`,
		Id:         "BaseType",
		NTType:     26,
		Index:      68,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint64, nil
		},
	},
	ProdTabEntry{
		String: `Service : "service" tok_identifier "{" ServiceElements "}" OptEnd	<< ast.NewService(X[1], X[3]) >>`,
		Id:         "Service",
		NTType:     27,
		Index:      69,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewService(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `ServiceElements : empty	<<  >>`,
		Id:         "ServiceElements",
		NTType:     28,
		Index:      70,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `ServiceElements : ServiceElements Doc Option	<< ast.AppendServiceOption(X[0], X[1], X[2]) >>`,
		Id:         "ServiceElements",
		NTType:     28,
		Index:      71,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendServiceOption(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `ServiceElements : ServiceElements Doc MethodFlag	<< ast.ChangeServiceMethodFlag(X[0], X[1], X[2]) >>`,
		Id:         "ServiceElements",
		NTType:     28,
		Index:      72,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ChangeServiceMethodFlag(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `ServiceElements : ServiceElements Doc Method	<< ast.AppendServiceMethod(X[0], X[1], X[2]) >>`,
		Id:         "ServiceElements",
		NTType:     28,
		Index:      73,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendServiceMethod(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `MethodFlag : "oneway" ":"	<< ast.Notify,nil >>`,
		Id:         "MethodFlag",
		NTType:     29,
		Index:      74,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.Notify,nil
		},
	},
	ProdTabEntry{
		String: `MethodFlag : "notify" ":"	<< ast.Notify,nil >>`,
		Id:         "MethodFlag",
		NTType:     29,
		Index:      75,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.Notify,nil
		},
	},
	ProdTabEntry{
		String: `MethodFlag : "twoway" ":"	<< ast.Call,nil >>`,
		Id:         "MethodFlag",
		NTType:     29,
		Index:      76,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.Call,nil
		},
	},
	ProdTabEntry{
		String: `Method : tok_identifier "(" MethodArgs ")" MethodRet MethodNo AddtionOption OptEnd	<< ast.NewMethod(X[0], X[2], X[4], X[5], X[6]) >>`,
		Id:         "Method",
		NTType:     30,
		Index:      77,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewMethod(X[0], X[2], X[4], X[5], X[6])
		},
	},
	ProdTabEntry{
		String: `MethodArgs : "void"	<< nil,nil >>`,
		Id:         "MethodArgs",
		NTType:     31,
		Index:      78,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil,nil
		},
	},
	ProdTabEntry{
		String: `MethodArgs : FiledType	<< ast.NewMessageByFieldType(X[0]) >>`,
		Id:         "MethodArgs",
		NTType:     31,
		Index:      79,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewMessageByFieldType(X[0])
		},
	},
	ProdTabEntry{
		String: `MethodArgs : MethodArgFields	<< ast.NewMessageByFeilds(X[0]) >>`,
		Id:         "MethodArgs",
		NTType:     31,
		Index:      80,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewMessageByFeilds(X[0])
		},
	},
	ProdTabEntry{
		String: `MethodArgFields : empty	<<  >>`,
		Id:         "MethodArgFields",
		NTType:     32,
		Index:      81,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `MethodArgFields : MethodArgFields Doc Field	<< ast.AppendMessageField(X[0], X[1], X[2]) >>`,
		Id:         "MethodArgFields",
		NTType:     32,
		Index:      82,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendMessageField(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `MethodNo : empty	<< ast.NewMethodNo(nil,nil) >>`,
		Id:         "MethodNo",
		NTType:     33,
		Index:      83,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewMethodNo(nil,nil)
		},
	},
	ProdTabEntry{
		String: `MethodNo : "=" tok_const_int	<< ast.NewMethodNo(X[1],nil) >>`,
		Id:         "MethodNo",
		NTType:     33,
		Index:      84,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewMethodNo(X[1],nil)
		},
	},
	ProdTabEntry{
		String: `MethodRet : "void"	<< nil,nil >>`,
		Id:         "MethodRet",
		NTType:     34,
		Index:      85,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil,nil
		},
	},
	ProdTabEntry{
		String: `MethodRet : FiledType	<< ast.NewMessageByFieldType(X[0]) >>`,
		Id:         "MethodRet",
		NTType:     34,
		Index:      86,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewMessageByFieldType(X[0])
		},
	},
	ProdTabEntry{
		String: `MethodRet : MethodRetArgs	<< ast.NewMessageByFeilds(X[0]) >>`,
		Id:         "MethodRet",
		NTType:     34,
		Index:      87,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewMessageByFeilds(X[0])
		},
	},
	ProdTabEntry{
		String: `MethodRetArgs : "(" MethodArgFields ")"	<< X[1],nil >>`,
		Id:         "MethodRetArgs",
		NTType:     35,
		Index:      88,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1],nil
		},
	},
	ProdTabEntry{
		String: `Project : "project" tok_identifier "{" ProjElements "}"	<< ast.NewProject(X[1], X[3]) >>`,
		Id:         "Project",
		NTType:     36,
		Index:      89,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewProject(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `ProjElements : empty	<< ast.NewProjectEmpty() >>`,
		Id:         "ProjElements",
		NTType:     37,
		Index:      90,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewProjectEmpty()
		},
	},
	ProdTabEntry{
		String: `ProjElements : ProjElements Doc ProjArea	<< ast.ChangeProjectArea(X[0], X[1], X[2]) >>`,
		Id:         "ProjElements",
		NTType:     37,
		Index:      91,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ChangeProjectArea(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `ProjElements : ProjElements Doc Option	<< ast.AppendProjectOption(X[0], X[1], X[2]) >>`,
		Id:         "ProjElements",
		NTType:     37,
		Index:      92,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendProjectOption(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `ProjArea : tok_identifier ":"	<< X[0],nil >>`,
		Id:         "ProjArea",
		NTType:     38,
		Index:      93,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0],nil
		},
	},
}
